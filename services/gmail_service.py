"""
Gmail Service

Provides email sending functionality using Gmail API.
Includes specialized functions for Google Docs and PowerPoint deck delivery.
"""

import base64
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from pathlib import Path
from typing import Optional, Dict, Any


def send_email(
    gmail_service,
    recipient_email: str,
    subject: str,
    body_html: str
) -> Dict[str, Any]:
    """
    Send a simple HTML email using Gmail API.
    
    Args:
        gmail_service: Authenticated Gmail API service client
        recipient_email: Recipient's email address
        subject: Email subject line
        body_html: HTML content for email body
    
    Returns:
        dict: Response from Gmail API containing message ID
    
    Raises:
        Exception: If email sending fails
    """
    message = MIMEText(body_html, "html")
    message["to"] = recipient_email
    message["subject"] = subject
    
    raw = base64.urlsafe_b64encode(message.as_bytes()).decode()
    
    try:
        sent = gmail_service.users().messages().send(
            userId="me",
            body={"raw": raw}
        ).execute()
        print(f"📧 Email sent to {recipient_email} (Message ID: {sent['id']})")
        return sent
    except Exception as e:
        print(f"❌ Failed to send email: {e}")
        raise


def send_google_doc_email(
    gmail_service,
    recipient_email: str,
    doc_link: str,
    doc_id: str,
    state: Dict[str, Any]
) -> Dict[str, Any]:
    """
    Send an email with a link to a Google Doc (for persona/buyer ecosystem reports).
    
    This function sends a professionally formatted email with:
    - Link to the Google Doc
    - Report input details
    - Generation metadata (cost, runtime, model used)
    
    Args:
        gmail_service: Authenticated Gmail API service client
        recipient_email: Recipient's email address
        doc_link: URL to the Google Doc
        doc_id: Google Doc ID
        state: Dictionary containing report metadata:
            - client: Client name
            - product_category: Product category
            - target_market_segments: Market segments
            - target_geographies: Geographic targets
            - model_used: AI model used
            - total_cost: Generation cost
            - runtime_human: Human-readable runtime
    
    Returns:
        dict: Response from Gmail API
    """
    subject = "Your AI-Generated Report is Ready! 📊"
    
    body_html = f"""
    <html>
      <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #2563eb;">✅ Your AI Report is Complete</h2>

        <p>Your buyer ecosystem and persona analysis report has been generated and is ready for review.</p>

        <div style="background-color: #f3f4f6; padding: 15px; border-radius: 5px; margin: 20px 0;">
          <h3 style="margin-top: 0;">📄 Access Your Report</h3>
          <p><a href="{doc_link}" target="_blank" style="color: #2563eb; font-weight: bold;">{doc_link}</a></p>
          <p style="font-size: 12px; color: #6b7280;">Document ID: <code>{doc_id}</code></p>
        </div>

        <hr style="border: 0; border-top: 1px solid #e5e7eb; margin: 30px 0;">

        <h3>📊 Report Inputs</h3>
        <ul style="line-height: 1.8;">
          <li><strong>Client:</strong> {state.get("client", "N/A")}</li>
          <li><strong>Product Category:</strong> {state.get("product_category", "N/A")}</li>
          <li><strong>Target Market Segments:</strong> {state.get("target_market_segments", "N/A")}</li>
          <li><strong>Target Geographies:</strong> {state.get("target_geographies", "N/A")}</li>
        </ul>

        <h3>⚙️ Generation Details</h3>
        <ul style="line-height: 1.8;">
          <li><strong>Model Used:</strong> {state.get("model_used", "N/A")}</li>
          <li><strong>Total Cost:</strong> ${state.get("total_cost", 0):.4f} USD</li>
          <li><strong>Runtime:</strong> {state.get("runtime_human", "N/A")}</li>
        </ul>

        <hr style="border: 0; border-top: 1px solid #e5e7eb; margin: 30px 0;">
        
        <p style="color: #6b7280; font-size: 12px;">
          This report was automatically generated by your AI Report Generator. 
          The Google Doc is accessible via the link above and can be edited, shared, or downloaded.
        </p>
      </body>
    </html>
    """
    
    return send_email(gmail_service, recipient_email, subject, body_html)


def send_deck_with_attachment(
    gmail_service,
    recipient_email: str,
    pptx_path: str,
    deck_title: str,
    deck_description: Optional[str] = None
) -> Dict[str, Any]:
    """
    Send an email with a PowerPoint deck attached as a file.
    
    This function sends a professionally formatted email with:
    - The PowerPoint file as an attachment
    - Deck details and description
    - Instructions for opening the file
    
    Args:
        gmail_service: Authenticated Gmail API service client
        recipient_email: Recipient's email address
        pptx_path: Full file path to the PowerPoint file
        deck_title: Title of the presentation deck
        deck_description: Optional description of what the deck is for
    
    Returns:
        dict: Response from Gmail API
    
    Raises:
        FileNotFoundError: If the PowerPoint file doesn't exist
    """
    pptx_file = Path(pptx_path)
    
    if not pptx_file.exists():
        raise FileNotFoundError(f"PowerPoint file not found: {pptx_path}")
    
    subject = f"Your Presentation is Ready: {deck_title} 🎉"
    
    # Optional description section
    description_section = ""
    if deck_description:
        description_section = f"""
        <div style="background-color: #f3f4f6; padding: 15px; border-radius: 5px; margin: 20px 0;">
          <h3 style="margin-top: 0;">📋 Deck Purpose</h3>
          <p>{deck_description}</p>
        </div>
        """
    
    body_html = f"""
    <html>
      <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #2563eb;">🎉 Your PowerPoint Deck is Ready!</h2>

        <p>Your AI-generated presentation has been successfully created and is <strong>attached to this email</strong>.</p>
        
        <div style="background-color: #f3f4f6; padding: 15px; border-radius: 5px; margin: 20px 0;">
          <h3 style="margin-top: 0;">📊 Deck Details</h3>
          <ul style="line-height: 1.8; margin: 10px 0;">
            <li><strong>Title:</strong> {deck_title}</li>
            <li><strong>Filename:</strong> <code>{pptx_file.name}</code></li>
          </ul>
        </div>

        {description_section}

        <div style="background-color: #dbeafe; padding: 15px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #2563eb;">
          <p style="margin: 0;"><strong>📎 File Attached</strong></p>
          <p style="margin: 5px 0 0 0; font-size: 14px;">
            The PowerPoint file is attached to this email. Simply download and open it in:
          </p>
          <ul style="margin: 10px 0; font-size: 14px;">
            <li>Microsoft PowerPoint</li>
            <li>Google Slides</li>
            <li>Apple Keynote</li>
            <li>Any compatible presentation software</li>
          </ul>
        </div>

        <hr style="border: 0; border-top: 1px solid #e5e7eb; margin: 30px 0;">
        
        <p style="color: #6b7280; font-size: 12px;">
          This presentation was automatically generated by your AI Deck Generator. 
          If you have any questions or need revisions, please reply to this email.
        </p>
      </body>
    </html>
    """
    
    # Create multipart message
    message = MIMEMultipart()
    message["to"] = recipient_email
    message["subject"] = subject
    
    # Attach HTML body
    message.attach(MIMEText(body_html, "html"))
    
    # Attach PowerPoint file
    with open(pptx_path, 'rb') as f:
        part = MIMEBase('application', 'vnd.openxmlformats-officedocument.presentationml.presentation')
        part.set_payload(f.read())
        encoders.encode_base64(part)
        part.add_header(
            'Content-Disposition',
            f'attachment; filename="{pptx_file.name}"'
        )
        message.attach(part)
    
    # Send email
    raw = base64.urlsafe_b64encode(message.as_bytes()).decode()
    
    try:
        sent = gmail_service.users().messages().send(
            userId="me",
            body={"raw": raw}
        ).execute()
        print(f"📧 Email with PowerPoint attachment sent to {recipient_email} (Message ID: {sent['id']})")
        return sent
    except Exception as e:
        print(f"❌ Failed to send email with attachment: {e}")
        raise
